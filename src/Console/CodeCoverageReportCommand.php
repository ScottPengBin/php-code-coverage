<?php

namespace Pengbin\CodeCoverage\Console;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Redis;
use SebastianBergmann\CodeCoverage\CodeCoverage;
use SebastianBergmann\CodeCoverage\Driver\Selector;
use SebastianBergmann\CodeCoverage\Filter;
use SebastianBergmann\CodeCoverage\RawCodeCoverageData;
use SebastianBergmann\CodeCoverage\Report\Html\Facade;

class CodeCoverageReportCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'code_coverage
              {--make : Generate code coverage reports }
              {--make-version= : Generate version code coverage reports }
              {--clear-file= : Clear the code coverage report generated by the file}
              {--clear-all : Clear code coverage reports generated by all files}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Code coverage file generation';

    private string $path;

    /**
     * Execute the console command.
     *
     * @return int
     * @throws \RedisException
     */
    public function handle(): int
    {

        $this->path = config('code_coverage.report_data_path');

        $make = $this->option('make');

        if ($make) {
            $this->generateHtmlCodeCoverageReport();
            return self::SUCCESS;
        } elseif ($makeVersion = $this->option('make-version')) {
            $this->path .= '-' . $makeVersion;
            $this->generateHtmlCodeCoverageReport($makeVersion);
            return self::SUCCESS;
        }

        if ($clearFile = $this->option('clear-file')) {
            $this->clearFile($clearFile);
            return self::SUCCESS;
        }

        if ($this->option('clear-all')) {
            $result = $this->ask('确定要删除全部吗？删除后不能恢复！ 确认请输入yes)');
            if (strtolower($result) == 'yes') {
                $this->comment('暂不支持');
            } else {
                $this->comment('您已取消');
            }

            return self::SUCCESS;
        }


        $this->error('请输入你要执行的操作');

        return 0;
    }

    /**
     * @param string $version
     * @return void
     * @throws \RedisException
     */
    private function generateHtmlCodeCoverageReport(string $version = ''): void
    {

        $redisClient = Redis::connection()->client();
        $basePath = app()->basePath();
        $keys = $redisClient->keys('code_coverage:file*');
        $codeCoverageData = [];
        foreach ($keys as $key) {
            $key = str_replace(config('database.redis.options.prefix'), '', $key);
            $filePath = $basePath . DIRECTORY_SEPARATOR . str_replace('code_coverage:file:', '', $key);
            $codeCoverageData[$filePath] = json_decode($redisClient->hGet($key, 'coverage_data'), true);
        }

        $rawCodeCoverageData = RawCodeCoverageData::fromXdebugWithoutPathCoverage($codeCoverageData);

        $this->comment('开始生成html');
        ini_set('memory_limit', -1);
        ini_set('xdebug.mode', 'coverage');
        $filter = new Filter;
        $filter->includeDirectory(app_path('Services'));
        $coverage = new CodeCoverage((new Selector)->forLineCoverage($filter), $filter);
        $coverage->start('code-coverage-report');
        $coverage->append($rawCodeCoverageData);
        $coverage->stop();

        $this->comment('html生成中');
        (new Facade)->process($coverage, $this->path);

        $this->comment('html生成完成');
        if (!empty($version)) {
            $this->comment('开始缓存 codeCoverageData');
            if (!is_dir($this->path . DIRECTORY_SEPARATOR . 'cache')) {
                mkdir($this->path . DIRECTORY_SEPARATOR . 'cache');
            }
            $filename = $this->path . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR . 'codeCoverageData';
            file_put_contents($filename, serialize($codeCoverageData));
            $this->comment('缓存 codeCoverageData 完成');
        }
    }

    /**
     * @param $clearFile
     * @return void
     * @throws \RedisException
     */
    private function clearFile($clearFile): void
    {
        $key = 'code_coverage:file:' . $clearFile;
        $redisClient = Redis::connection()->client();
        $exists = $redisClient->hExists($key, 'coverage_data');
        if (!$exists) {
            $this->error(public_path($clearFile) . '文件未加入代码覆盖');
        }


        $this->comment('开始清理..：' . $clearFile);

        $redisClient->hDel($key, 'coverage_data');

        $this->comment('清理完成..：' . $clearFile);

        $this->comment('重新生成代码覆盖率..');
        $this->generateHtmlCodeCoverageReport();
    }


    /**
     * @throws \RedisException
     */
    private function clearAll()
    {
        $this->comment('开始清理');

        $this->comment('清理完成文件');

        $this->generateHtmlCodeCoverageReport();
    }
}
